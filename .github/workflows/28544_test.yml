# Workflow name shown in GitHub Actions UI
name: 28544_test

# This workflow runs every time code is pushed to the 'main' branch
on:
  push:
    branches: [main]

jobs:
  # First job: Check if the test file exists
  checkTests:
    name: check if test file exists
    runs-on: ubuntu-latest  # Use the latest Ubuntu virtual machine

    steps:
      # Step 1: Checkout the latest code from the repo
      - name: checkout
        uses: actions/checkout@v3

      # Step 2: Check if the test file 'openCV_test.py' exists
      - name: check for openCV_test.py
        id: check  # ID used to reference outputs in later jobs
        run: |
          if [ -f openCV_test.py ]; then
            echo "Test file found."
            echo "error_exists=false" >> $GITHUB_OUTPUT  # Set output variable
          else
            echo "Test file 'openCV_test.py' not found!" 1>&2
            echo "Test file not found!" > napaka.txt     # Save error to file
            echo "error_exists=true" >> $GITHUB_OUTPUT   # Set output variable
          fi

      # Step 3: Upload the napaka.txt file as an artifact (available to next job)
      - name: upload napaka.txt
        if: always()  # Always run this step, even if previous one failed
        uses: actions/upload-artifact@v3
        with:
          name: napaka
          path: napaka.txt

  # Second job: Run the tests (only if the first job succeeded)
  runTests:
    name: run tests
    needs: checkTests  # Depends on the previous job
    if: needs.checkTests.outputs.error_exists == 'false'  # Only run if no errors
    runs-on: ubuntu-latest

    # Matrix allows running the same job across different Python versions
    strategy:
      matrix:
        pythonVersion: [3.8, 3.10]

    steps:
      # Step 1: Checkout the code again (each job runs in a new environment)
      - name: checkout
        uses: actions/checkout@v3

      # Step 2: Download the error artifact created in the previous job
      - name: download napaka.txt
        uses: actions/download-artifact@v3
        with:
          name: napaka
        continue-on-error: true  # Ignore if file is missing (safe fallback)

      # Step 3: Set up the selected Python version from the matrix
      - name: set up python
        uses: actions/setup-python@v4
        with:
          pythonVersion: ${{ matrix.python-version }}

      # Step 4: Install dependencies (if a requirements.txt file exists)
      - name: dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Step 5: Run the unit tests using the unittest framework
      - name: run tests
        run: |
          if grep -q "not found" napaka.txt; then
            echo "Error found in napaka.txt. Exiting."
            exit 1  # Fail the job if there's an error
          else
            echo "Running unit tests..."
            python -m unittest openCV_test.py  # Run your test file
          fi
